// Copyright 2024 Coralogix Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package e2e

import (
	"context"
	"fmt"
	"time"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
	"google.golang.org/grpc/codes"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/utils/ptr"
	"sigs.k8s.io/controller-runtime/pkg/client"

	cxsdk "github.com/coralogix/coralogix-management-sdk/go"

	coralogixv1alpha1 "github.com/coralogix/coralogix-operator/api/coralogix/v1alpha1"
)

var _ = Describe("Preset", Ordered, func() {
	var (
		crClient            client.Client
		notificationsClient *cxsdk.NotificationsClient
		presetID            string
		preset              *coralogixv1alpha1.Preset
	)

	BeforeAll(func() {
		crClient = ClientsInstance.GetControllerRuntimeClient()
		notificationsClient = ClientsInstance.GetCoralogixClientSet().Notifications()
	})

	It("Should be created successfully", func(ctx context.Context) {
		By("Creating Preset")
		presetName := "slack-preset"
		preset = &coralogixv1alpha1.Preset{
			ObjectMeta: metav1.ObjectMeta{
				Name:      presetName,
				Namespace: testNamespace,
			},
			Spec: coralogixv1alpha1.PresetSpec{
				Name:        "Slack Alert Preset",
				Description: "A preset for Slack integration",
				EntityType:  "alerts",
				ParentId:    "preset_system_slack_alerts_basic",
				ConnectorType: &coralogixv1alpha1.PresetConnectorType{
					Slack: &coralogixv1alpha1.PresetSlack{
						General: &coralogixv1alpha1.PresetSlackGeneral{
							StructuredFields: &coralogixv1alpha1.PresetSlackStructuredFields{
								Title:       ptr.To("Critical Alert"),
								Description: ptr.To("This is a critical alert notification."),
								Footer:      ptr.To("Generated by Coralogix"),
							},
						},
						Overrides: []coralogixv1alpha1.PresetSlackOverride{
							{
								StructuredFields: &coralogixv1alpha1.PresetSlackStructuredFields{
									Title:       ptr.To("Override Alert Title"),
									Description: ptr.To("This is an overridden alert description."),
									Footer:      ptr.To("Override Footer"),
								},
								EntitySubType: "metricThresholdMoreThanTriggered",
							},
							{
								RawFields: &coralogixv1alpha1.PresetSlackRawFields{
									Payload: `{"text": "This is a raw alert notification."}`,
								},
								EntitySubType: "metricThresholdLessThanTriggered",
							},
						},
					},
				},
			},
		}
		Expect(crClient.Create(ctx, preset)).To(Succeed())

		By("Fetching the Preset ID")
		fetchedPreset := &coralogixv1alpha1.Preset{}
		Eventually(func(g Gomega) error {
			g.Expect(crClient.Get(ctx, types.NamespacedName{Name: presetName, Namespace: testNamespace}, fetchedPreset)).To(Succeed())
			if fetchedPreset.Status.Id != nil {
				presetID = *fetchedPreset.Status.Id
				return nil
			}
			return fmt.Errorf("preset ID is not set")
		}, time.Minute, time.Second).Should(Succeed())

		By("Verifying Preset exists in Coralogix backend")
		Eventually(func() error {
			_, err := notificationsClient.GetPreset(ctx, &cxsdk.GetPresetRequest{
				Identifier: &cxsdk.PresetIdentifier{
					Value: &cxsdk.PresetIdentifierIDValue{
						Id: presetID,
					},
				},
			})
			return err
		}, time.Minute, time.Second).Should(Succeed())
	})

	It("Should be updated successfully", func(ctx context.Context) {
		By("Patching the Preset")
		newPresetName := "slack-preset-updated"
		modifiedPreset := preset.DeepCopy()
		modifiedPreset.Spec.Name = newPresetName
		Expect(crClient.Patch(ctx, modifiedPreset, client.MergeFrom(preset))).To(Succeed())

		By("Verifying Preset is updated in Coralogix backend")
		Eventually(func() string {
			getPresetRes, err := notificationsClient.GetPreset(ctx, &cxsdk.GetPresetRequest{
				Identifier: &cxsdk.PresetIdentifier{
					Value: &cxsdk.PresetIdentifierIDValue{
						Id: presetID,
					},
				},
			})
			Expect(err).ToNot(HaveOccurred())
			return getPresetRes.GetPreset().GetName()
		}, time.Minute, time.Second).Should(Equal(newPresetName))
	})

	It("Should be deleted successfully", func(ctx context.Context) {
		By("Deleting the Preset")
		Expect(crClient.Delete(ctx, preset)).To(Succeed())

		By("Verifying Preset is deleted from Coralogix backend")
		Eventually(func() codes.Code {
			_, err := notificationsClient.GetPreset(ctx, &cxsdk.GetPresetRequest{
				Identifier: &cxsdk.PresetIdentifier{
					Value: &cxsdk.PresetIdentifierIDValue{
						Id: presetID,
					},
				},
			})
			return cxsdk.Code(err)
		}, time.Minute, time.Second).Should(Equal(codes.NotFound))
	})

	It("should deny creation of Preset with two types", func(ctx context.Context) {
		preset.Spec.ConnectorType = &coralogixv1alpha1.PresetConnectorType{
			GenericHttps: &coralogixv1alpha1.PresetGenericHttps{},
			Slack:        &coralogixv1alpha1.PresetSlack{},
		}
		err := crClient.Create(ctx, preset)
		Expect(err).To(HaveOccurred())
		Expect(err.Error()).To(ContainSubstring("only one connector type should be set"))
	})
})
