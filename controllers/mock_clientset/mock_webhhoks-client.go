// Code generated by MockGen. DO NOT EDIT.
// Source: webhooks-client.go
//
// Generated by this command:
//
//      mockgen -source webhooks-client.go
//
// Package mock_clientset is a generated GoMock package.
package mock_clientset

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWebhooksClientInterface is a mock of WebhooksClientInterface interface.
type MockWebhooksClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWebhooksClientInterfaceMockRecorder
}

// MockWebhooksClientInterfaceMockRecorder is the mock recorder for MockWebhooksClientInterface.
type MockWebhooksClientInterfaceMockRecorder struct {
	mock *MockWebhooksClientInterface
}

// NewMockWebhooksClientInterface creates a new mock instance.
func NewMockWebhooksClientInterface(ctrl *gomock.Controller) *MockWebhooksClientInterface {
	mock := &MockWebhooksClientInterface{ctrl: ctrl}
	mock.recorder = &MockWebhooksClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhooksClientInterface) EXPECT() *MockWebhooksClientInterfaceMockRecorder {
	return m.recorder
}

// CreateWebhook mocks base method.
func (m *MockWebhooksClientInterface) CreateWebhook(ctx context.Context, body string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebhook", ctx, body)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWebhook indicates an expected call of CreateWebhook.
func (mr *MockWebhooksClientInterfaceMockRecorder) CreateWebhook(ctx, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebhook", reflect.TypeOf((*MockWebhooksClientInterface)(nil).CreateWebhook), ctx, body)
}

// DeleteWebhook mocks base method.
func (m *MockWebhooksClientInterface) DeleteWebhook(ctx context.Context, webhookId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWebhook", ctx, webhookId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWebhook indicates an expected call of DeleteWebhook.
func (mr *MockWebhooksClientInterfaceMockRecorder) DeleteWebhook(ctx, webhookId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebhook", reflect.TypeOf((*MockWebhooksClientInterface)(nil).DeleteWebhook), ctx, webhookId)
}

// GetWebhook mocks base method.
func (m *MockWebhooksClientInterface) GetWebhook(ctx context.Context, webhookId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhook", ctx, webhookId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhook indicates an expected call of GetWebhook.
func (mr *MockWebhooksClientInterfaceMockRecorder) GetWebhook(ctx, webhookId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhook", reflect.TypeOf((*MockWebhooksClientInterface)(nil).GetWebhook), ctx, webhookId)
}

// GetWebhooks mocks base method.
func (m *MockWebhooksClientInterface) GetWebhooks(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhooks", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhooks indicates an expected call of GetWebhooks.
func (mr *MockWebhooksClientInterfaceMockRecorder) GetWebhooks(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhooks", reflect.TypeOf((*MockWebhooksClientInterface)(nil).GetWebhooks), ctx)
}

// UpdateWebhook mocks base method.
func (m *MockWebhooksClientInterface) UpdateWebhook(ctx context.Context, body string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWebhook", ctx, body)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWebhook indicates an expected call of UpdateWebhook.
func (mr *MockWebhooksClientInterfaceMockRecorder) UpdateWebhook(ctx, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebhook", reflect.TypeOf((*MockWebhooksClientInterface)(nil).UpdateWebhook), ctx, body)
}